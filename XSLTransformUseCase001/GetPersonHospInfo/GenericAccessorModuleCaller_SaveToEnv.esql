

CREATE COMPUTE MODULE GenericAccessorModuleCaller_SaveToEnv
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();

/******************************************************************************************************************************		
		DECLARE I, J, K, L INTEGER;
		DECLARE refToEnvPayload, refToEnvRecord REFERENCE TO Environment.userdata;
		
		MOVE refToEnvPayload TO Environment.userdata.PAYLOAD;
		IF NOT LASTMOVE(refToEnvPayload) THEN
			CREATE LASTCHILD OF Environment.userdata AS refToEnvPayload DOMAIN 'XMLNSC' NAME 'PAYLOAD';
		END IF;
		
		SET I = 1;
		SET J = CARDINALITY(InputRoot.XMLNSC.records.record[]);
		WHILE I <= J DO
			IF I = 1 THEN
				IF EXISTS(InputRoot.XMLNSC.records.record[I].PAGEOFFSET[]) THEN
					SET Environment.userdata.pageOffset = InputRoot.XMLNSC.records.record[I].PAGEOFFSET;
				ELSE
					DELETE FIELD Environment.userdata.pageOffset;
				END IF;
			END IF;
			CREATE LASTCHILD OF refToEnvPayload as refToEnvRecord DOMAIN 'XMLNSC' NAME 'record';
			SET K = 1;
			SET L = CARDINALITY(InputRoot.XMLNSC.records.record[I].*[]);
			WHILE K <= L DO
				SET refToEnvRecord.*[K] = InputRoot.XMLNSC.records.record[I].*[K];
				SET K = K + 1;
			END WHILE;
			SET I = I + 1;
		END WHILE;
***********************************************************************************************************************************************/
		DECLARE I, K INTEGER 1;
		DECLARE J, L INTEGER;
		DECLARE refToEnvStruct, refToEnvChildRecord REFERENCE TO Environment.userdata;
		
		SET J = CARDINALITY(InputRoot.XMLNSC.records.record[]);
		WHILE I <= J DO
			IF I = 1 THEN
				
				MOVE refToEnvStruct TO Environment.userdata.PAYLOAD;
				IF NOT LASTMOVE(refToEnvStruct) THEN
					CREATE LASTCHILD OF Environment.userdata AS refToEnvStruct DOMAIN 'XMLNSC' NAME 'PAYLOAD';
				END IF;
				
				MOVE refToEnvStruct TO Environment.userdata.PAYLOAD.parent;
				IF NOT LASTMOVE(refToEnvStruct) THEN
					CREATE LASTCHILD OF Environment.userdata.PAYLOAD AS refToEnvStruct DOMAIN 'XMLNSC' NAME 'parent';
					CREATE LASTCHILD OF refToEnvStruct DOMAIN 'XMLNSC' NAME 'record';
					SET L = CARDINALITY(InputRoot.XMLNSC.records.record[I].*[]);
					SET K = 1;
					WHILE K <= L DO
						SET refToEnvStruct.record.*[K] = InputRoot.XMLNSC.records.record[I].*[K];
						SET K = K + 1;
					END WHILE;
				END IF;
				IF EXISTS(InputRoot.XMLNSC.records.record[I].PAGEOFFSET[]) THEN
					SET Environment.userdata.pageOffset = InputRoot.XMLNSC.records.record[I].PAGEOFFSET;
				ELSE
					DELETE FIELD Environment.userdata.pageOffset;
				END IF;
			ELSE
				MOVE refToEnvStruct TO Environment.userdata.PAYLOAD.child;
				IF NOT LASTMOVE(refToEnvStruct) THEN
					CREATE LASTCHILD OF Environment.userdata.PAYLOAD AS refToEnvStruct DOMAIN 'XMLNSC' NAME 'child';
				END IF;
				CREATE LASTCHILD OF refToEnvStruct AS refToEnvChildRecord DOMAIN 'XMLNSC' NAME 'record';
				SET L = CARDINALITY(InputRoot.XMLNSC.records.record[I].*[]);
				SET K = 1;
				WHILE K <= L DO
					SET refToEnvChildRecord.*[K] = InputRoot.XMLNSC.records.record[I].*[K];
					SET K = K + 1;
				END WHILE;

			END IF;
			SET I = I + 1;
		END WHILE;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
